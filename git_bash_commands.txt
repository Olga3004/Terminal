1) Посмотреть где я - pwd
2) Создать папку - mkdir
3) Зайти в папку - cd
4) Создать 3 папки - mkdir -p {dir1,dir2,dir3}
5) Зайти в любоую папку cd dir1
6) Создать 5 файлов (3 txt, 2 json) - touch file1.txt file2.txt file3.txt file4.json file5.json
7) Создать 3 папки - mkdir -p dir1/{dir6,dir7,dir8}
8) Вывести список содержимого папки - ls -la
9) + Открыть любой txt файл - vim file1.txt
10) + написать туда что-нибудь, любой текст - press i something here i texted
11) + сохранить и выйти - Esc затем :wq
12) Выйти из папки на уровень выше - cd ..
13) переместить любые 2 файла, которые вы создали, в любую другую папку - mv dir1/file2.txt dir1/file3.txt dir2
14) скопировать любые 2 файла, которые вы создали, в любую другую папку - cp dir2/file2.txt dir2/file3.txt dir1
15) Найти файл по имени - find  . -name file2.txt
16) просмотреть содержимое в реальном времени (команда grep) изучите как она работает - cat file.txt or grep -r file
17) вывести несколько первых строк из текстового файла - head -n file.txt (n- колличество строк)
18) вывести несколько последних строк из текстового файла - tail -n file.txt (n- колличество строк) 
19) просмотреть содержимое длинного файла (команда less) изучите как она работает - less file.txt
20) вывести дату и время - date
21) склонировать репозиторий - git clone и ссылка на созданный репозиторий
22) создать ветку - git checkout -b и название ветки. Создали ветку и сразу в нее перепрыгнули.
Создали в ветке файл или перекинули файл далее добавили, закомители, смержили и запушили
23)Перепрыгнуть на другую ветку - git checkout название ветки
24) Посмотреть существующие ветки - git branch
25) Смержить 2 ветки - git merge название не основной ветки, чтобы смержить нужно находится в основной ветке
26) Запушить вторую ветку на гит - git push -u origin и название ветки, которую мы ходить запушить
27) Удалить ветку из локального репозитория git branch -d имя ветки , которую хотим удалить
28) Чтобы вернуть ветку - git fetch origin имя ветки , которую хотим вернуть
29) Переименовать ветку - git branch -m текущее имя ветки и новое имя ветки
30)


1) Зайти на сервер - ssh user_12@23.88.52.139 (имя сервера и хост) пароль 123
2) Выйти из сервера - ctrl A D
3) залить файл на внешний сервак - scp main_padawan.py user_12@23.88.52.139:/home/user_12/Olya_PW/main_padawan.py (команда + файл, который хотим залить + имя юзера +хост + полный путь)
4) Чтобы все хорошо работало и не пересекалось с другими серверами. то нужно сделать скрин. Скрин- это изолированая область памяти в которой можно спокойно работать например, 
со своими переменными, со своими задачами и не боясь что можно что-то перезатереть в другом процессе5 в другом сервере или кто-то другой не перезатрет мой процесс, как личная песочница
screen -S olya_serwer

5) Какие скрины запущены screen -ls. Мой юзер видит только пои скрины.
6) Зайти в скрин - screen -r  + новер сервера, который высветиться после screen -ls
7) Создать виртуальное окружение sudo - apt install python3.8-venv
8) Активировать виртуальное окружение - source venv/bin/activate На следующей строке появится (venv). Значит мы в окружении. 
9) Сздать переменную - export FLASK_APP=main_padawan.py
10) Запустить пайтон сервер - flask run --host="0.0.0.0" --port="5012"    Запустить не получается, т.к установлены не все пакеты, то нужно устанавливать.
11) Остановать сервак - Ctrl c
12) Перед запуском нужно установать 2 пакета  - pip install psycopg2-binary и второй пакет pip3 install flask-swagger-ui
13)











/home/user_12/Olya_PW/static
















let jsonData = JSON.parse(responseBody);
postman.setEnvironmentVariable("token", jsonData.token);



//1)Статус код 200 
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

//2) Проверка структуры Json в ответе 
pm.test("your test age", function () {
    let jsonData = pm.response.json();
    pm.expect(jsonData.person.u_age).to.eql(32);
});

//3) Проверке правильности результата перемножения на коэффициент
pm.test("your test salary", () => {
    const responseJson = pm.response.json();
    pm.expect(responseJson.qa_salary_after_6_months).to.eql(responseJson.
       start_qa_salary*2);
    pm.expect(responseJson.qa_salary_after_12_months).to.eql(responseJson.
       start_qa_salary*2.9);
    pm.expect(responseJson.person.u_salary_1_5_year).to.eql(responseJson.
       start_qa_salary*4);
});

// pm.variables.get("u_salary_1.5_year")


pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});


pm.test("your test age", function () {
    let jsonData = pm.response.json();
    pm.expect(jsonData.age).to.eql(32);
});

 

let responseJson = JSON.parse(responseBody);
// postman.setEnvironmentVariable("salary", responseJson.salary);
postman.setEnvironmentVariable ("u_salary_1.5_year", responseJson.salary[0]*4);



pm.test("Correct multiplication", function () {
    let jsonData = pm.response.json();
    console.log (jsonData.salary[0],jsonData.salary[1],jsonData.salary[2] )
    let salary = jsonData.salary[0];
    let salary2 = parseInt((jsonData.salary[1])*2);
    let salary3 = parseInt((jsonData.salary[2])*3);
});    


pm.test("eql salary", function () {
    let jsonData = pm.response.json();
    pm.expect(parseInt(jsonData.salary[2])>(jsonData.salary[1])).to.be.true;
    pm.expect(parseInt(jsonData.salary[2])>(jsonData.salary[0])).to.be.true;
});
